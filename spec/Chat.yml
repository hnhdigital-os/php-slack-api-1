post:
  delete:
    description: 'Deletes a message.'
    url: 'https://api.slack.com/methods/chat.delete'
    endpoint: /chat.delete
    parameters:
      as_user:
        type: boolean
        description: 'Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope.'
      ts:
        type: number
        description: 'Timestamp of the message to be deleted.'
      channel:
        type: string
        description: 'Channel containing the message to be deleted.'
  meMessage:
    description: 'Share a me message into a channel.'
    url: 'https://api.slack.com/methods/chat.meMessage'
    endpoint: /chat.meMessage
    parameters:
      text:
        type: string
        description: 'Text of the message to send.'
      channel:
        type: string
        description: 'Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name.'
  postEphemeral:
    description: 'Sends an ephemeral message to a user in a channel.'
    url: 'https://api.slack.com/methods/chat.postEphemeral'
    endpoint: /chat.postEphemeral
    parameters:
      attachments:
        type: string
        description: 'A JSON-based array of structured attachments, presented as a URL-encoded string.'
      text:
        type: string
        description: 'Text of the message to send. See below for an explanation of [formatting](#formatting). This field is usually required, unless you''re providing only `attachments` instead.'
      link_names:
        type: boolean
        description: 'Find and link channel names and usernames.'
      parse:
        type: string
        description: 'Change how messages are treated. Defaults to `none`. See [below](#formatting).'
      user:
        type: string
        description: '`id` of the user who will receive the ephemeral message. The user should be in the channel specified by the `channel` argument.'
      as_user:
        type: boolean
        description: 'Pass true to post the message as the authed bot. Defaults to false.'
      channel:
        type: string
        description: 'Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name.'
  postMessage:
    description: 'Sends a message to a channel.'
    url: 'https://api.slack.com/methods/chat.postMessage'
    endpoint: /chat.postMessage
    parameters:
      username:
        type: string
        description: 'Set your bot''s user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.'
      thread_ts:
        type: number
        description: 'Provide another message''s `ts` value to make this message a reply. Avoid using a reply''s `ts` value; use its parent instead.'
      attachments:
        type: string
        description: 'A JSON-based array of structured attachments, presented as a URL-encoded string.'
      unfurl_links:
        type: boolean
        description: 'Pass true to enable unfurling of primarily text-based content.'
      text:
        type: string
        description: 'Text of the message to send. See below for an explanation of [formatting](#formatting). This field is usually required, unless you''re providing only `attachments` instead. Provide no more than 40,000 characters or [risk truncation](/changelog/2018-04-truncating-really-long-messages).'
      unfurl_media:
        type: boolean
        description: 'Pass false to disable unfurling of media content.'
      parse:
        type: string
        description: 'Change how messages are treated. Defaults to `none`. See [below](#formatting).'
      as_user:
        type: boolean
        description: 'Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below.'
      mrkdwn:
        type: boolean
        description: 'Disable Slack markup parsing by setting to `false`. Enabled by default.'
      icon_emoji:
        type: string
        description: 'Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below.'
      link_names:
        type: boolean
        description: 'Find and link channel names and usernames.'
      icon_url:
        type: string
        description: 'URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.'
      channel:
        type: string
        description: 'Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.'
      reply_broadcast:
        type: boolean
        description: 'Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`.'
  unfurl:
    description: 'Provide custom unfurl behavior for user-posted URLs'
    url: 'https://api.slack.com/methods/chat.unfurl'
    endpoint: /chat.unfurl
    parameters:
      user_auth_message:
        type: string
        description: 'Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior'
      user_auth_required:
        type: boolean
        description: 'Set to `true` or `1` to indicate the user must install your Slack app to trigger unfurls for this domain'
      unfurls:
        type: string
        description: 'URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl message attachments.'
      ts:
        type: string
        description: 'Timestamp of the message to add unfurl behavior to.'
      user_auth_url:
        type: string
        description: 'Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded.'
      channel:
        type: string
        description: 'Channel ID of the message'
  update:
    description: 'Updates a message.'
    url: 'https://api.slack.com/methods/chat.update'
    endpoint: /chat.update
    parameters:
      attachments:
        type: string
        description: 'A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting `text`.'
      text:
        type: string
        description: 'New text for the message, using the [default formatting rules](/docs/formatting). It''s not required when presenting `attachments`.'
      ts:
        type: number
        description: 'Timestamp of the message to be updated.'
      parse:
        type: string
        description: 'Change how messages are treated. Defaults to `client`, unlike `chat.postMessage`. See [below](#formatting).'
      as_user:
        type: boolean
        description: 'Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users.'
      link_names:
        type: boolean
        description: 'Find and link channel names and usernames. Defaults to `none`. See [below](#formatting).'
      channel:
        type: string
        description: 'Channel containing the message to be updated.'
get:
  getPermalink:
    description: 'Retrieve a permalink URL for a specific extant message'
    url: 'https://api.slack.com/methods/chat.getPermalink'
    endpoint: /chat.getPermalink
    parameters:
      message_ts:
        type: number
        description: 'A message''s `ts` value, uniquely identifying it within a channel'
      channel:
        type: string
        description: 'The ID of the conversation or channel containing the message'
