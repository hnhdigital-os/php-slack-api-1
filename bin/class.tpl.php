<?php
?>

namespace HnhDigital\SlackApi<?= $namespace ?>;

/*
 * This file is part of the PHP Slack API.
 *
 * (c) H&H|Digital <hello@hnh.digital>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

<?= generate_class_aliases(['use HnhDigital\SlackApi\Foundation\Base;' => true], $namespace, $spec) ?>


/**
 * This is the <?= $class_name ?> class.
 *
 * This file is automatically generated.
 *
 * @link <?= array_get($spec, 'url') ?>

 *
 * @author Rocco Howard <rocco@hnh.digital>
 */
class <?= $class_name ?> extends Base
{
    /**
     * Endpoint.
     *
     * @var string
     */
    protected $endpoint = '<?= array_get($spec, 'endpoint') ?>';

<?php
foreach (array_get($spec, 'parameters', []) as $name => $settings) {
?>
    /**
     * <?= title_case(str_replace('_', ' ', $name)) ?>.
     *
     * @var <?= convert_paramater_type(array_get($settings, 'type')) ?>

     */
    protected $<?= $name ?>;

<?php
}
foreach (array_get($spec, 'get', []) as $name => $settings) {
    if (array_has($settings, 'auto-fill') && is_string(array_get($settings, 'auto-fill'))) {
?>
    /**
     * <?= title_case(str_replace('_', ' ', array_get($settings, 'auto-fill'))) ?>.
     *
     * @var array
     */
    public $<?= array_get($settings, 'auto-fill') ?> = [];

<?php
    }
}
if (array_has($spec, 'fillable')) {
?>
    /**
     * This model is fillable.
     *
     * @var bool
     */
    protected $fillable = true;

    /**
     * This model's method that provides the data to fill it.
     *
     * @var string
     */
    protected $fill_method = '<?= array_get($settings, 'load-method', 'get') ?>';

<?php
}
foreach (array_get($spec, 'lists', []) as $name => $list) {
?>
    /**
     * <?= title_case(str_replace('_', ' ', $name)) ?>.
     *
     * @var array
     */
    public $<?= $name ?> = [
<?php
    echo generate_list($list);
?>
    ];

<?php
}
?>
    /**
     * Constructor.
     *
     * @return void
     */
    public function __construct(<?= generate_constructor_parameters($spec) ?>)
    {
<?php
foreach (array_get($spec, 'parameters', []) as $name => $settings) {
?>
        $this-><?= $name ?> = $<?= $name ?>;
<?php
}
?>
        parent::__construct(<?= generate_constructor_parameters($spec, true) ?>);
    }
<?php
foreach (array_get($spec, 'get', []) as $name => $settings) {
?>

    /**
<?= generate_method_description($settings) ?>
     *
     * @link <?= array_get($settings, 'url', array_get($spec, 'url')) ?>

     *
     * @return array
     */
    public function <?= $name ?>(<?= generate_parameter_list($settings) ?>)
    {
<?php
if (array_has($settings, 'endpoint') && !array_has($settings, 'search')) {
?>
        return $this->apiCall('get', '<?= array_get($settings, 'endpoint', '') ?>'<?= api_call_parameters($settings) ?>);
<?php
} elseif (array_has($settings, 'endpoint') && array_has($settings, 'search')) {
?>
        return $this->apiSearch($this->endpoint<?= array_get($settings, 'endpoint', '') != '' ? ".'".array_get($settings, 'endpoint', '')."'" : '' ?><?= api_search_parameters($settings) ?>);
<?php
} elseif (array_has($settings, 'model')) {
?>
        return (new <?= str_replace(['HnhDigital\SlackApi'.$namespace.'\\', $class_name.'\\'], '', array_get($settings, 'model')) ?>(<?= generate_new_class_parameter_list($settings) ?>))-><?= array_get($settings, 'model-load-method', 'all') ?>();
<?php
}
?>
    }
<?php
}
?>
<?php
foreach (array_get($spec, 'put', []) as $name => $settings) {
?>

    /**
<?= generate_method_description($settings) ?>
     *
<?= generate_parameter_comments($settings) ?>
     * @link <?= array_get($settings, 'url', array_get($spec, 'url')) ?>

     *
     * @return void
     */
    public function <?= $name ?>(<?= generate_parameter_list($settings) ?>)
    {
        return $this->apiCall('put', <?= generate_endpoint_entry($settings) ?>, <?= generate_put_function_payload($settings) ?>);
    }
<?php
}
?>
<?php
foreach (array_get($spec, 'post', []) as $name => $settings) {
?>

    /**
<?= generate_method_description($settings) ?>
     *
<?= generate_parameter_comments($settings) ?>
     * @link <?= array_get($settings, 'url', array_get($spec, 'url')) ?>

     *
     * @return mixed
     */
    public function <?= $name ?>(<?= generate_parameter_list($settings) ?>)
    {
        <?= array_has($settings, 'factory') ? '$result =' : 'return' ?> $this->apiCall('post', <?= generate_endpoint_entry($settings) ?><?= generate_post_function_payload($settings) ?>);
<?php
if (array_has($settings, 'factory')) {
?>

        return $this->factory($result, <?= factory_parameters($settings) ?>);
<?php
}
?>
    }
<?php
}
?>
<?php
foreach (array_get($spec, 'delete', []) as $name => $settings) {
?>

    /**
<?= generate_method_description($settings) ?>
     *
<?= generate_parameter_comments($settings) ?>
     * @link <?= array_get($settings, 'url', array_get($spec, 'url')) ?>

     *
     * @return void
     */
    public function <?= $name ?>()
    {
        return $this->apiCall('delete', <?= generate_endpoint_entry($settings) ?>);
    }
<?php
}
?>
}
