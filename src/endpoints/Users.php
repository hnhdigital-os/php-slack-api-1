<?php

namespace HnhDigital\SlackApi;

/*
 * This file is part of the PHP Slack API.
 *
 * (c) H&H|Digital <hello@hnh.digital>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use HnhDigital\SlackApi\Foundation\Base;

/**
 * This is the Users class.
 *
 * This file is automatically generated.
 *
 * @link 
 *
 * @author Rocco Howard <rocco@hnh.digital>
 */
class Users extends Base
{
    /**
     * Endpoint.
     *
     * @var string
     */
    protected $endpoint = '';

    /**
     * Constructor.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * List conversations the calling user may access.
     *
     * @link https://api.slack.com/methods/users.conversations
     *
     * @return array
     */
    public function conversations($optional = [])
    {
        return $this->apiCall('get', '/users.conversations');
    }

    /**
     * Gets user presence information.
     *
     * @link https://api.slack.com/methods/users.getPresence
     *
     * @return array
     */
    public function getPresence($optional = [])
    {
        return $this->apiCall('get', '/users.getPresence');
    }

    /**
     * Get a user's identity.
     *
     * @link https://api.slack.com/methods/users.identity
     *
     * @return array
     */
    public function identity()
    {
        return $this->apiCall('get', '/users.identity');
    }

    /**
     * Gets information about a user.
     *
     * @link https://api.slack.com/methods/users.info
     *
     * @return array
     */
    public function info($optional = [])
    {
        return $this->apiCall('get', '/users.info');
    }

    /**
     * Lists all users in a Slack team.
     *
     * @link https://api.slack.com/methods/users.list
     *
     * @return array
     */
    public function getList($optional = [])
    {
        return $this->apiCall('get', '/users.list');
    }

    /**
     * Find a user with an email address.
     *
     * @link https://api.slack.com/methods/users.lookupByEmail
     *
     * @return array
     */
    public function lookupByEmail($optional = [])
    {
        return $this->apiCall('get', '/users.lookupByEmail');
    }

    /**
     * Set the user profile photo
     *
     * @param string $image    File contents via `multipart/form-data`.
     * @param array  $optional
     *                         - [crop_w=null] (integer) Width/height of crop box (always square)
     *                         - [crop_y=null] (integer) Y coordinate of top-left corner of crop box
     *                         - [crop_x=null] (integer) X coordinate of top-left corner of crop box
     *
     * @link https://api.slack.com/methods/users.setPhoto
     *
     * @return mixed
     */
    public function setPhoto($image, $optional = [])
    {
        return $this->apiCall('post', '/users.setPhoto', ['json' => array_merge([
            'image' => $image,
        ], $optional)]);
    }

    /**
     * Delete the user profile photo
     *
     * @link https://api.slack.com/methods/users.deletePhoto
     *
     * @return mixed
     */
    public function deletePhoto()
    {
        return $this->apiCall('post', '/users.deletePhoto');
    }

    /**
     * Marked a user as active. Deprecated and non-functional.
     *
     * @link https://api.slack.com/methods/users.setActive
     *
     * @return mixed
     */
    public function setActive()
    {
        return $this->apiCall('post', '/users.setActive');
    }

    /**
     * Manually sets user presence.
     *
     * @param array $optional
     *                        - [presence=null] (string) Either `auto` or `away`
     *
     * @link https://api.slack.com/methods/users.setPresence
     *
     * @return mixed
     */
    public function setPresence($optional = [])
    {
        return $this->apiCall('post', '/users.setPresence', ['json' => array_merge([
        ], $optional)]);
    }
}
