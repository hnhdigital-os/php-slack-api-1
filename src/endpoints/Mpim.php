<?php

namespace HnhDigital\SlackApi;

/*
 * This file is part of the PHP Slack API.
 *
 * (c) H&H|Digital <hello@hnh.digital>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use HnhDigital\SlackApi\Foundation\Base;

/**
 * This is the Mpim class.
 *
 * This file is automatically generated.
 *
 * @link 
 *
 * @author Rocco Howard <rocco@hnh.digital>
 */
class Mpim extends Base
{
    /**
     * Endpoint.
     *
     * @var string
     */
    protected $endpoint = '';

    /**
     * Constructor.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Fetches history of messages and events from a multiparty direct message.
     *
     * @link https://api.slack.com/methods/mpim.history
     *
     * @return array
     */
    public function history($optional = [])
    {
        return $this->apiCall('get', '/mpim.history');
    }

    /**
     * Lists multiparty direct message channels for the calling user.
     *
     * @link https://api.slack.com/methods/mpim.list
     *
     * @return array
     */
    public function getList()
    {
        return $this->apiCall('get', '/mpim.list');
    }

    /**
     * Retrieve a thread of messages posted to a direct message conversation from a multiparty direct message.
     *
     * @link https://api.slack.com/methods/mpim.replies
     *
     * @return array
     */
    public function replies($optional = [])
    {
        return $this->apiCall('get', '/mpim.replies');
    }

    /**
     * Closes a multiparty direct message channel.
     *
     * @param array $optional
     *                        - [channel=null] (string) MPIM to close.
     *
     * @link https://api.slack.com/methods/mpim.close
     *
     * @return mixed
     */
    public function close($optional = [])
    {
        return $this->apiCall('post', '/mpim.close', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Sets the read cursor in a multiparty direct message channel.
     *
     * @param array $optional
     *                        - [ts=null] (number) Timestamp of the most recently seen message.
     *                        - [channel=null] (string) multiparty direct message channel to set reading cursor
     *                        in.
     *
     * @link https://api.slack.com/methods/mpim.mark
     *
     * @return mixed
     */
    public function mark($optional = [])
    {
        return $this->apiCall('post', '/mpim.mark', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * This method opens a multiparty direct message.
     *
     * @param array $optional
     *                        - [users=null] (string) Comma separated lists of users. The ordering of the
     *                        users is preserved whenever a MPIM group is returned.
     *
     * @link https://api.slack.com/methods/mpim.open
     *
     * @return mixed
     */
    public function open($optional = [])
    {
        return $this->apiCall('post', '/mpim.open', ['json' => array_merge([
        ], $optional)]);
    }
}
