<?php

namespace HnhDigital\SlackApi;

/*
 * This file is part of the PHP Slack API.
 *
 * (c) H&H|Digital <hello@hnh.digital>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use HnhDigital\SlackApi\Foundation\Base;

/**
 * This is the Files class.
 *
 * This file is automatically generated.
 *
 * @link 
 *
 * @author Rocco Howard <rocco@hnh.digital>
 */
class Files extends Base
{
    /**
     * Endpoint.
     *
     * @var string
     */
    protected $endpoint = '';

    /**
     * Constructor.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Gets information about a team file.
     *
     * @link https://api.slack.com/methods/files.info
     *
     * @return array
     */
    public function info($optional = [])
    {
        return $this->apiCall('get', '/files.info');
    }

    /**
     * Lists & filters team files.
     *
     * @link https://api.slack.com/methods/files.list
     *
     * @return array
     */
    public function getList($optional = [])
    {
        return $this->apiCall('get', '/files.list');
    }

    /**
     * Deletes a file.
     *
     * @param array $optional
     *                        - [file=null] (string) ID of file to delete.
     *
     * @link https://api.slack.com/methods/files.delete
     *
     * @return mixed
     */
    public function delete($optional = [])
    {
        return $this->apiCall('post', '/files.delete', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Revokes public/external sharing access for a file
     *
     * @param array $optional
     *                        - [file=null] (string) File to revoke
     *
     * @link https://api.slack.com/methods/files.revokePublicURL
     *
     * @return mixed
     */
    public function revokePublicURL($optional = [])
    {
        return $this->apiCall('post', '/files.revokePublicURL', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Enables a file for public/external sharing.
     *
     * @param array $optional
     *                        - [file=null] (string) File to share
     *
     * @link https://api.slack.com/methods/files.sharedPublicURL
     *
     * @return mixed
     */
    public function sharedPublicURL($optional = [])
    {
        return $this->apiCall('post', '/files.sharedPublicURL', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Uploads or creates a file.
     *
     * @param array $optional
     *                        - [channels=null] (string) Comma-separated list of channel names or IDs where the
     *                        file will be shared.
     *                        - [title=null] (string) Title of file.
     *                        - [initial_comment=null] (string) Initial comment to add to file.
     *                        - [filetype=null] (string) A [file type](/types/file#file_types) identifier.
     *                        - [filename=null] (string) Filename of file.
     *                        - [content=null] (string) File contents via a POST variable. If omitting this
     *                        parameter, you must provide a `file`.
     *                        - [file=null] (string) File contents via `multipart/form-data`. If omitting
     *                        this parameter, you must submit `content`.
     *
     * @link https://api.slack.com/methods/files.upload
     *
     * @return mixed
     */
    public function upload($optional = [])
    {
        return $this->apiCall('post', '/files.upload', ['json' => array_merge([
        ], $optional)]);
    }
}
