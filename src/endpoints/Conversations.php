<?php

namespace HnhDigital\SlackApi;

/*
 * This file is part of the PHP Slack API.
 *
 * (c) H&H|Digital <hello@hnh.digital>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use HnhDigital\SlackApi\Foundation\Base;

/**
 * This is the Conversations class.
 *
 * This file is automatically generated.
 *
 * @link 
 *
 * @author Rocco Howard <rocco@hnh.digital>
 */
class Conversations extends Base
{
    /**
     * Endpoint.
     *
     * @var string
     */
    protected $endpoint = '';

    /**
     * Constructor.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Fetches a conversation's history of messages and events.
     *
     * @link https://api.slack.com/methods/conversations.history
     *
     * @return array
     */
    public function history($optional = [])
    {
        return $this->apiCall('get', '/conversations.history');
    }

    /**
     * Retrieve information about a conversation.
     *
     * @link https://api.slack.com/methods/conversations.info
     *
     * @return array
     */
    public function info($optional = [])
    {
        return $this->apiCall('get', '/conversations.info');
    }

    /**
     * Lists all channels in a Slack team.
     *
     * @link https://api.slack.com/methods/conversations.list
     *
     * @return array
     */
    public function getList($optional = [])
    {
        return $this->apiCall('get', '/conversations.list');
    }

    /**
     * Retrieve members of a conversation.
     *
     * @link https://api.slack.com/methods/conversations.members
     *
     * @return array
     */
    public function members($optional = [])
    {
        return $this->apiCall('get', '/conversations.members');
    }

    /**
     * Retrieve a thread of messages posted to a conversation
     *
     * @link https://api.slack.com/methods/conversations.replies
     *
     * @return array
     */
    public function replies($optional = [])
    {
        return $this->apiCall('get', '/conversations.replies');
    }

    /**
     * Archives a conversation.
     *
     * @param array $optional
     *                        - [channel=null] (string) ID of conversation to archive
     *
     * @link https://api.slack.com/methods/conversations.archive
     *
     * @return mixed
     */
    public function archive($optional = [])
    {
        return $this->apiCall('post', '/conversations.archive', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Closes a direct message or multi-person direct message.
     *
     * @param array $optional
     *                        - [channel=null] (string) Conversation to close.
     *
     * @link https://api.slack.com/methods/conversations.close
     *
     * @return mixed
     */
    public function close($optional = [])
    {
        return $this->apiCall('post', '/conversations.close', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Initiates a public or private channel-based conversation
     *
     * @param array $optional
     *                        - [name=null] (string) Name of the public or private channel to create
     *                        - [is_private=null] (boolean) Create a private channel instead of a public one
     *
     * @link https://api.slack.com/methods/conversations.create
     *
     * @return mixed
     */
    public function create($optional = [])
    {
        return $this->apiCall('post', '/conversations.create', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Invites users to a channel.
     *
     * @param array $optional
     *                        - [users=null] (string) A comma separated list of user IDs. Up to 30 users may
     *                        be listed.
     *                        - [channel=null] (string) The ID of the public or private channel to invite
     *                        user(s) to.
     *
     * @link https://api.slack.com/methods/conversations.invite
     *
     * @return mixed
     */
    public function invite($optional = [])
    {
        return $this->apiCall('post', '/conversations.invite', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Joins an existing conversation.
     *
     * @param array $optional
     *                        - [channel=null] (string) ID of conversation to join
     *
     * @link https://api.slack.com/methods/conversations.join
     *
     * @return mixed
     */
    public function join($optional = [])
    {
        return $this->apiCall('post', '/conversations.join', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Removes a user from a conversation.
     *
     * @param array $optional
     *                        - [user=null] (string) User ID to be removed.
     *                        - [channel=null] (string) ID of conversation to remove user from.
     *
     * @link https://api.slack.com/methods/conversations.kick
     *
     * @return mixed
     */
    public function kick($optional = [])
    {
        return $this->apiCall('post', '/conversations.kick', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Leaves a conversation.
     *
     * @param array $optional
     *                        - [channel=null] (string) Conversation to leave
     *
     * @link https://api.slack.com/methods/conversations.leave
     *
     * @return mixed
     */
    public function leave($optional = [])
    {
        return $this->apiCall('post', '/conversations.leave', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Opens or resumes a direct message or multi-person direct message.
     *
     * @param array $optional
     *                        - [return_im=null] (boolean) Boolean, indicates you want the full IM channel
     *                        definition in the response.
     *                        - [users=null] (string) Comma separated lists of users. If only one user is
     *                        included, this creates a 1:1 DM. The ordering of the
     *                        users is preserved whenever a multi-person direct
     *                        message is returned. Supply a `channel` when not
     *                        supplying `users`.
     *                        - [channel=null] (string) Resume a conversation by supplying an `im` or `mpim`'s
     *                        ID. Or provide the `users` field instead.
     *
     * @link https://api.slack.com/methods/conversations.open
     *
     * @return mixed
     */
    public function open($optional = [])
    {
        return $this->apiCall('post', '/conversations.open', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Renames a conversation.
     *
     * @param array $optional
     *                        - [name=null] (string) New name for conversation.
     *                        - [channel=null] (string) ID of conversation to rename
     *
     * @link https://api.slack.com/methods/conversations.rename
     *
     * @return mixed
     */
    public function rename($optional = [])
    {
        return $this->apiCall('post', '/conversations.rename', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Sets the purpose for a conversation.
     *
     * @param array $optional
     *                        - [purpose=null] (string) A new, specialer purpose
     *                        - [channel=null] (string) Conversation to set the purpose of
     *
     * @link https://api.slack.com/methods/conversations.setPurpose
     *
     * @return mixed
     */
    public function setPurpose($optional = [])
    {
        return $this->apiCall('post', '/conversations.setPurpose', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Sets the topic for a conversation.
     *
     * @param array $optional
     *                        - [topic=null] (string) The new topic string. Does not support formatting or
     *                        linkification.
     *                        - [channel=null] (string) Conversation to set the topic of
     *
     * @link https://api.slack.com/methods/conversations.setTopic
     *
     * @return mixed
     */
    public function setTopic($optional = [])
    {
        return $this->apiCall('post', '/conversations.setTopic', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Reverses conversation archival.
     *
     * @param array $optional
     *                        - [channel=null] (string) ID of conversation to unarchive
     *
     * @link https://api.slack.com/methods/conversations.unarchive
     *
     * @return mixed
     */
    public function unarchive($optional = [])
    {
        return $this->apiCall('post', '/conversations.unarchive', ['json' => array_merge([
        ], $optional)]);
    }
}
