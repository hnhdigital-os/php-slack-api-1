<?php

namespace HnhDigital\SlackApi;

/*
 * This file is part of the PHP Slack API.
 *
 * (c) H&H|Digital <hello@hnh.digital>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use HnhDigital\SlackApi\Foundation\Base;

/**
 * This is the Channels class.
 *
 * This file is automatically generated.
 *
 * @link 
 *
 * @author Rocco Howard <rocco@hnh.digital>
 */
class Channels extends Base
{
    /**
     * Endpoint.
     *
     * @var string
     */
    protected $endpoint = '';

    /**
     * Constructor.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Fetches history of messages and events from a channel.
     *
     * @link https://api.slack.com/methods/channels.history
     *
     * @return array
     */
    public function history($optional = [])
    {
        return $this->apiCall('get', '/channels.history');
    }

    /**
     * Gets information about a channel.
     *
     * @link https://api.slack.com/methods/channels.info
     *
     * @return array
     */
    public function info($optional = [])
    {
        return $this->apiCall('get', '/channels.info');
    }

    /**
     * Lists all channels in a Slack team.
     *
     * @link https://api.slack.com/methods/channels.list
     *
     * @return array
     */
    public function getList($optional = [])
    {
        return $this->apiCall('get', '/channels.list');
    }

    /**
     * Retrieve a thread of messages posted to a channel
     *
     * @link https://api.slack.com/methods/channels.replies
     *
     * @return array
     */
    public function replies($optional = [])
    {
        return $this->apiCall('get', '/channels.replies');
    }

    /**
     * Archives a channel.
     *
     * @param array $optional
     *                        - [channel=null] (string) Channel to archive
     *
     * @link https://api.slack.com/methods/channels.archive
     *
     * @return mixed
     */
    public function archive($optional = [])
    {
        return $this->apiCall('post', '/channels.archive', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Creates a channel.
     *
     * @param array $optional
     *                        - [validate=null] (boolean) Whether to return errors on invalid channel name instead
     *                        of modifying it to meet the specified criteria.
     *                        - [name=null] (string) Name of channel to create
     *
     * @link https://api.slack.com/methods/channels.create
     *
     * @return mixed
     */
    public function create($optional = [])
    {
        return $this->apiCall('post', '/channels.create', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Invites a user to a channel.
     *
     * @param array $optional
     *                        - [user=null] (string) User to invite to channel.
     *                        - [channel=null] (string) Channel to invite user to.
     *
     * @link https://api.slack.com/methods/channels.invite
     *
     * @return mixed
     */
    public function invite($optional = [])
    {
        return $this->apiCall('post', '/channels.invite', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Joins a channel, creating it if needed.
     *
     * @param array $optional
     *                        - [validate=null] (boolean) Whether to return errors on invalid channel name instead
     *                        of modifying it to meet the specified criteria.
     *                        - [name=null] (string) Name of channel to join
     *
     * @link https://api.slack.com/methods/channels.join
     *
     * @return mixed
     */
    public function join($optional = [])
    {
        return $this->apiCall('post', '/channels.join', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Removes a user from a channel.
     *
     * @param array $optional
     *                        - [user=null] (string) User to remove from channel.
     *                        - [channel=null] (string) Channel to remove user from.
     *
     * @link https://api.slack.com/methods/channels.kick
     *
     * @return mixed
     */
    public function kick($optional = [])
    {
        return $this->apiCall('post', '/channels.kick', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Leaves a channel.
     *
     * @param array $optional
     *                        - [channel=null] (string) Channel to leave
     *
     * @link https://api.slack.com/methods/channels.leave
     *
     * @return mixed
     */
    public function leave($optional = [])
    {
        return $this->apiCall('post', '/channels.leave', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Sets the read cursor in a channel.
     *
     * @param array $optional
     *                        - [ts=null] (number) Timestamp of the most recently seen message.
     *                        - [channel=null] (string) Channel to set reading cursor in.
     *
     * @link https://api.slack.com/methods/channels.mark
     *
     * @return mixed
     */
    public function mark($optional = [])
    {
        return $this->apiCall('post', '/channels.mark', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Renames a channel.
     *
     * @param array $optional
     *                        - [validate=null] (boolean) Whether to return errors on invalid channel name instead
     *                        of modifying it to meet the specified criteria.
     *                        - [name=null] (string) New name for channel.
     *                        - [channel=null] (string) Channel to rename
     *
     * @link https://api.slack.com/methods/channels.rename
     *
     * @return mixed
     */
    public function rename($optional = [])
    {
        return $this->apiCall('post', '/channels.rename', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Sets the purpose for a channel.
     *
     * @param array $optional
     *                        - [purpose=null] (string) The new purpose
     *                        - [channel=null] (string) Channel to set the purpose of
     *
     * @link https://api.slack.com/methods/channels.setPurpose
     *
     * @return mixed
     */
    public function setPurpose($optional = [])
    {
        return $this->apiCall('post', '/channels.setPurpose', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Sets the topic for a channel.
     *
     * @param array $optional
     *                        - [topic=null] (string) The new topic
     *                        - [channel=null] (string) Channel to set the topic of
     *
     * @link https://api.slack.com/methods/channels.setTopic
     *
     * @return mixed
     */
    public function setTopic($optional = [])
    {
        return $this->apiCall('post', '/channels.setTopic', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Unarchives a channel.
     *
     * @param array $optional
     *                        - [channel=null] (string) Channel to unarchive
     *
     * @link https://api.slack.com/methods/channels.unarchive
     *
     * @return mixed
     */
    public function unarchive($optional = [])
    {
        return $this->apiCall('post', '/channels.unarchive', ['json' => array_merge([
        ], $optional)]);
    }
}
