<?php

namespace HnhDigital\SlackApi;

/*
 * This file is part of the PHP Slack API.
 *
 * (c) H&H|Digital <hello@hnh.digital>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use HnhDigital\SlackApi\Foundation\Base;

/**
 * This is the UserGroups class.
 *
 * This file is automatically generated.
 *
 * @link 
 *
 * @author Rocco Howard <rocco@hnh.digital>
 */
class UserGroups extends Base
{
    /**
     * Endpoint.
     *
     * @var string
     */
    protected $endpoint = '';

    /**
     * Constructor.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * List all User Groups for a team
     *
     * @link https://api.slack.com/methods/usergroups.list
     *
     * @return array
     */
    public function getList($optional = [])
    {
        return $this->apiCall('get', '/usergroups.list');
    }

    /**
     * Create a User Group
     *
     * @param array $optional
     *                        - [handle=null] (string) A mention handle. Must be unique among channels, users
     *                        and User Groups.
     *                        - [name=null] (string) A name for the User Group. Must be unique among User
     *                        Groups.
     *                        - [channels=null] (string) A comma separated string of encoded channel IDs for
     *                        which the User Group uses as a default.
     *                        - [include_count=null] (boolean) Include the number of users in each User Group.
     *                        - [description=null] (string) A short description of the User Group.
     *
     * @link https://api.slack.com/methods/usergroups.create
     *
     * @return mixed
     */
    public function create($optional = [])
    {
        return $this->apiCall('post', '/usergroups.create', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Disable an existing User Group
     *
     * @param array $optional
     *                        - [include_count=null] (boolean) Include the number of users in the User Group.
     *                        - [usergroup=null] (string) The encoded ID of the User Group to disable.
     *
     * @link https://api.slack.com/methods/usergroups.disable
     *
     * @return mixed
     */
    public function disable($optional = [])
    {
        return $this->apiCall('post', '/usergroups.disable', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Enable a User Group
     *
     * @param array $optional
     *                        - [include_count=null] (boolean) Include the number of users in the User Group.
     *                        - [usergroup=null] (string) The encoded ID of the User Group to enable.
     *
     * @link https://api.slack.com/methods/usergroups.enable
     *
     * @return mixed
     */
    public function enable($optional = [])
    {
        return $this->apiCall('post', '/usergroups.enable', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Update an existing User Group
     *
     * @param array $optional
     *                        - [handle=null] (string) A mention handle. Must be unique among channels, users
     *                        and User Groups.
     *                        - [description=null] (string) A short description of the User Group.
     *                        - [channels=null] (string) A comma separated string of encoded channel IDs for
     *                        which the User Group uses as a default.
     *                        - [include_count=null] (boolean) Include the number of users in the User Group.
     *                        - [usergroup=null] (string) The encoded ID of the User Group to update.
     *                        - [name=null] (string) A name for the User Group. Must be unique among User
     *                        Groups.
     *
     * @link https://api.slack.com/methods/usergroups.update
     *
     * @return mixed
     */
    public function update($optional = [])
    {
        return $this->apiCall('post', '/usergroups.update', ['json' => array_merge([
        ], $optional)]);
    }
}
