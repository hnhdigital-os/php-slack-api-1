<?php

namespace HnhDigital\SlackApi;

/*
 * This file is part of the PHP Slack API.
 *
 * (c) H&H|Digital <hello@hnh.digital>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use HnhDigital\SlackApi\Foundation\Base;

/**
 * This is the Chat class.
 *
 * This file is automatically generated.
 *
 * @link 
 *
 * @author Rocco Howard <rocco@hnh.digital>
 */
class Chat extends Base
{
    /**
     * Endpoint.
     *
     * @var string
     */
    protected $endpoint = '';

    /**
     * Constructor.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Retrieve a permalink URL for a specific extant message
     *
     * @link https://api.slack.com/methods/chat.getPermalink
     *
     * @return array
     */
    public function getPermalink($optional = [])
    {
        return $this->apiCall('get', '/chat.getPermalink');
    }

    /**
     * Deletes a message.
     *
     * @param array $optional
     *                        - [as_user=null] (boolean) Pass true to delete the message as the authed user with
     *                        `chat:write:user` scope. [Bot users](/bot-users) in this
     *                        context are considered authed users. If unused or false,
     *                        the message will be deleted with `chat:write:bot` scope.
     *                        - [ts=null] (number) Timestamp of the message to be deleted.
     *                        - [channel=null] (string) Channel containing the message to be deleted.
     *
     * @link https://api.slack.com/methods/chat.delete
     *
     * @return mixed
     */
    public function delete($optional = [])
    {
        return $this->apiCall('post', '/chat.delete', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Share a me message into a channel.
     *
     * @param array $optional
     *                        - [text=null] (string) Text of the message to send.
     *                        - [channel=null] (string) Channel to send message to. Can be a public channel,
     *                        private group or IM channel. Can be an encoded ID, or a
     *                        name.
     *
     * @link https://api.slack.com/methods/chat.meMessage
     *
     * @return mixed
     */
    public function meMessage($optional = [])
    {
        return $this->apiCall('post', '/chat.meMessage', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Sends an ephemeral message to a user in a channel.
     *
     * @param array $optional
     *                        - [attachments=null] (string) A JSON-based array of structured attachments, presented
     *                        as a URL-encoded string.
     *                        - [text=null] (string) Text of the message to send. See below for an
     *                        explanation of [formatting](#formatting). This field is
     *                        usually required, unless you're providing only
     *                        `attachments` instead.
     *                        - [link_names=null] (boolean) Find and link channel names and usernames.
     *                        - [parse=null] (string) Change how messages are treated. Defaults to `none`. See
     *                        [below](#formatting).
     *                        - [user=null] (string) `id` of the user who will receive the ephemeral message.
     *                        The user should be in the channel specified by the
     *                        `channel` argument.
     *                        - [as_user=null] (boolean) Pass true to post the message as the authed bot.
     *                        Defaults to false.
     *                        - [channel=null] (string) Channel, private group, or IM channel to send message
     *                        to. Can be an encoded ID, or a name.
     *
     * @link https://api.slack.com/methods/chat.postEphemeral
     *
     * @return mixed
     */
    public function postEphemeral($optional = [])
    {
        return $this->apiCall('post', '/chat.postEphemeral', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Sends a message to a channel.
     *
     * @param array $optional
     *                        - [username=null] (string) Set your bot's user name. Must be used in conjunction
     *                        with `as_user` set to false, otherwise ignored. See
     *                        [authorship](#authorship) below.
     *                        - [thread_ts=null] (number) Provide another message's `ts` value to make this
     *                        message a reply. Avoid using a reply's `ts` value; use
     *                        its parent instead.
     *                        - [attachments=null] (string) A JSON-based array of structured attachments, presented
     *                        as a URL-encoded string.
     *                        - [unfurl_links=null] (boolean) Pass true to enable unfurling of primarily text-based
     *                        content.
     *                        - [text=null] (string) Text of the message to send. See below for an
     *                        explanation of [formatting](#formatting). This field is
     *                        usually required, unless you're providing only
     *                        `attachments` instead. Provide no more than 40,000
     *                        characters or [risk
     *                        truncation](/changelog/2018-04-truncating-really-long-messages).
     *                        - [unfurl_media=null] (boolean) Pass false to disable unfurling of media content.
     *                        - [parse=null] (string) Change how messages are treated. Defaults to `none`. See
     *                        [below](#formatting).
     *                        - [as_user=null] (boolean) Pass true to post the message as the authed user,
     *                        instead of as a bot. Defaults to false. See
     *                        [authorship](#authorship) below.
     *                        - [mrkdwn=null] (boolean) Disable Slack markup parsing by setting to `false`.
     *                        Enabled by default.
     *                        - [icon_emoji=null] (string) Emoji to use as the icon for this message. Overrides
     *                        `icon_url`. Must be used in conjunction with `as_user`
     *                        set to `false`, otherwise ignored. See
     *                        [authorship](#authorship) below.
     *                        - [link_names=null] (boolean) Find and link channel names and usernames.
     *                        - [icon_url=null] (string) URL to an image to use as the icon for this message.
     *                        Must be used in conjunction with `as_user` set to false,
     *                        otherwise ignored. See [authorship](#authorship) below.
     *                        - [channel=null] (string) Channel, private group, or IM channel to send message
     *                        to. Can be an encoded ID, or a name. See
     *                        [below](#channels) for more details.
     *                        - [reply_broadcast=null] (boolean) Used in conjunction with `thread_ts` and indicates
     *                        whether reply should be made visible to everyone in the
     *                        channel or conversation. Defaults to `false`.
     *
     * @link https://api.slack.com/methods/chat.postMessage
     *
     * @return mixed
     */
    public function postMessage($optional = [])
    {
        return $this->apiCall('post', '/chat.postMessage', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Provide custom unfurl behavior for user-posted URLs
     *
     * @param array $optional
     *                        - [user_auth_message=null] (string) Provide a simply-formatted string to send as an
     *                        ephemeral message to the user as invitation to
     *                        authenticate further and enable full unfurling behavior
     *                        - [user_auth_required=null] (boolean) Set to `true` or `1` to indicate the user must install
     *                        your Slack app to trigger unfurls for this domain
     *                        - [unfurls=null] (string) URL-encoded JSON map with keys set to URLs featured in
     *                        the the message, pointing to their unfurl message
     *                        attachments.
     *                        - [ts=null] (string) Timestamp of the message to add unfurl behavior to.
     *                        - [user_auth_url=null] (string) Send users to this custom URL where they will complete
     *                        authentication in your app to fully trigger unfurling.
     *                        Value should be properly URL-encoded.
     *                        - [channel=null] (string) Channel ID of the message
     *
     * @link https://api.slack.com/methods/chat.unfurl
     *
     * @return mixed
     */
    public function unfurl($optional = [])
    {
        return $this->apiCall('post', '/chat.unfurl', ['json' => array_merge([
        ], $optional)]);
    }

    /**
     * Updates a message.
     *
     * @param array $optional
     *                        - [attachments=null] (string) A JSON-based array of structured attachments, presented
     *                        as a URL-encoded string. This field is required when not
     *                        presenting `text`.
     *                        - [text=null] (string) New text for the message, using the [default formatting
     *                        rules](/docs/formatting). It's not required when
     *                        presenting `attachments`.
     *                        - [ts=null] (number) Timestamp of the message to be updated.
     *                        - [parse=null] (string) Change how messages are treated. Defaults to `client`,
     *                        unlike `chat.postMessage`. See [below](#formatting).
     *                        - [as_user=null] (boolean) Pass true to update the message as the authed user. [Bot
     *                        users](/bot-users) in this context are considered authed
     *                        users.
     *                        - [link_names=null] (boolean) Find and link channel names and usernames. Defaults to
     *                        `none`. See [below](#formatting).
     *                        - [channel=null] (string) Channel containing the message to be updated.
     *
     * @link https://api.slack.com/methods/chat.update
     *
     * @return mixed
     */
    public function update($optional = [])
    {
        return $this->apiCall('post', '/chat.update', ['json' => array_merge([
        ], $optional)]);
    }
}
